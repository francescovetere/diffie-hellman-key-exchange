Network Security - Project Assignment

Project Name: Authenticated Key Exchange


Abstract
==============================

The objective of this project is to implement an authenticated DH key exchange between a client and a server using a TCP.
Ephemeral DH is used (new DH private values are created for each exchange) and it is authenticated using the server RSA public key.
The client side can be tested using an online server.


Description
==============================


Key Exchange Overview:


In order to establish a secure communication between a client and a server, through a TCP connection, an authenticated DH key exchange is used.

The exchange is here summarized:
C -> S: y_c
S -> C: y_s, sign_s, auth_s
C -> S: auth_c

where:
y_c = DH public value of the client = g^x_c mod p
y_s = DH public value of the server = g^x_s mod p
g = DH base (primitive root)
p = DH modulus (prime)
x_c = DH private value of the client
x_s = DH private value of the server

sign_s = Sign(KS-,yc||y_s)
y_c||y_s = concatenation of the two arrays of bytes corresponding to the two values y_c and y_s
Sign(KS-,data) = RSA digital signature of the given data with the key K-
Verify(K+,signature) = verification of a RSA signature using the key k+
K+ = RSA public key of the server = (n,e)
K- = RSA private key of the server = (n,d)

auth_s = E(k_m,SN)
auth_c = E(k_m,CN)
E(k,data) = AES128 encryption with key k of data in CBC mode, with PKCS#5 padding
k_m = a 128bit secret key derived from the DH secret value k_dh, taking the rightmost 16 bytes of k_dh
k_dh = DH secret value = g^(x_c*x_s) mod p



Key Exchange Description:


The client and server already share the DH modulus p and generator g values. The client already got the server RSA public key K+.

All protocol fields (y_c, y_s, Sign(), etc) are exchanged between A and B through a TCP connection enveloped in a proper messaging protocol. Two different designs are specified below for such messaging protocol (a textual messaging protocol and a binary messaging protocol).


The key exchange is initiated by the client that, after establishing a TCP connection, sends its DH public value y_c to the server.

The server responds with its DH public value y_c, followed by the the signature sig_s computed on the concatenation of the two DH public values y_c||y_s, followed by the server authentication tag auth_s computed by encrypting in AES128-CBC-PKCS5Padding the server name.

The client replies with the client authentication tag auth_c computed by encrypting in AES128-CBC-PKCS5Padding the client name.

The AES key is formed by the last 16 bytes of the DH secret. The IV is 0 (16 zero bytes).


The following values for p, g, n, and e should be considered; both p (DH modulus) and n (RSA modulus) are 1024bit numbers; the given (n,e) pair is the RSA public key K+ of the server available online; large numbers are hereafter provided in both decimal and hexadecimal formats:
p[decimal]: 171718397966129586011229151993178480901904202533705695869569760169920539808075437788747086722975900425740754301098468647941395164593810074170462799608062493021989285837416815548721035874378548121236050948528229416139585571568998066586304075565145536350296006867635076744949977849997684222020336013226588207303
p[hexadecimal]: f488fd584e49dbcd20b49de49107366b336c380d451d0f7c88b31c7c5b2d8ef6f3c923c043f0a55b188d8ebb558cb85d38d334fd7c175743a31d186cde33212cb52aff3ce1b1294018118d7c84a70a72d686c40319c807297aca950cd9969fabd00a509b0246d3083d66a45d419f9c7cbd894b221926baaba25ec355e92f78c7
g[decimal]: 2
n[decimal]: 124707504124669832754048695488399386164061423841169546038891068096834606767261496699177787906147155900810427155846472626268461648947351779285831186645370253900907225651414326315567347500644048892622078969207402655779488768619122448970469844534518521138137334979874147868026856237563055452930295726223017536251
n[hexadecimal]: b196e1a7c79a4d66750539bb93f822e088bcd8a6f162fc8503983eb95d682b7ee3093b5bb746b1446550c1e9149b460fc3e461109e102d0312c3b1b4b5da4619dda8a77741475d9ead85001c5c4329f39a2b5a65375571e5f30793415aa5bebaba8b683f547b343e59293462bf185647b97a8d7b943dd2fb8e68815f14826afb
e[decimal]: 65537


The online server uses SHA1withRSA as signature algorithm, that in turn uses SHA1 as hashing function.


One of the following two messaging protocols has to be used for enveloping and exchanging all the above fields (y_c, y_s, sign_s, auth_s, auth_c).



Textual messaging protocol:


In this case, each field is separately encoded in hexadecimal (1 byte -> 2 chars). To the encoded data is then appended the 2-char CRLF sequence, that is the concatenation of the two characters CR=carriage return ('\r') and LF=line feed ('\n').
This CRLF sequence is used by the receiver to delimit each field.

For example, if a field contains four bytes with values: 0x01, 0x02, 0x03, and 0x4, the resulting textual message written into the TCP connection will be: 01020304\r\n
with a total length of 10 bytes.

A key exchange server running according to this protocol is available at: netsec.unipr.it:7020 (host netsec.unipr.it, TCP port 7020).



Binary messaging protocol:


In this case, each field is instead encoded by simply concatenating the length of the field (encoded in two bytes in network order, that is the most significant byte is sent first) to the raw byte data.

For example, if a field contains four bytes with values: 0x01, 0x02, 0x03, and 0x4, the resulting binary message written on the TCP connection will be: 0x00 0x04 0x01, 0x02, 0x03, 0x4
with a total length of 6 bytes.

A key exchange server running according to this protocol is available at: netsec.unipr.it:7021 (host netsec.unipr.it, TCP port 7021).



Example:


Here there is an example of data exchange from C to S and from S to C using the textual protocol; the data is within quotes; spaces and lines are not part of the messages, '\r' and '\n' are the carriage return and line feed characters:

C -> S:
"5d6f6b48bc458a9be287a28275d981e24bb7a591777b2c0c06e35e8fd8ccaa2a
14d751dd253979dc3a9856ddd7c13e663714ec2e366f1e70fb969918fddcda80
a1f7c37d828651e9b34bcd080ce8efaabcc009e3ed1bffa59b289f229cbdf56d
8dae8027837d6b8ab8d93fe9ec7c174cfbd25c23a99de22e9b7bc5ca30d2c00f
\r\n"

S -> C:
"cf1d1e594a8025bb82fa0406c17a095f2823faf97c493fec51ae11350cfad4ca
c06f215833d9522e534418a8334cc5874d0508d0ae9c851ef70324320688c691
69a106b2fb457d77ceb273654478845199dc76dfa52958210b28aa898a55c95a
531c84ed86196fc996622fc3bfef4b2c01add46feeb4381bdb7b38bb113b1174
\r\n
49c0aa95cb4d4591676f3ce4b524a22397cb227489c637ce658461f0087fd795
cc788debc50eabefe4b3b21d4081df2aa17b33025c989b385495b22b0bbcce2f
0eb61caf57dd49e5e1fd304182fc3354357558bf5c40cefdf4168f0ee288ef49
3190e3c85ffe0c341afd7418d4789c649c9797ca6c1a37b5e17d15939d0d41e6
\r\n
"5e1885ed9211e1440cccb06dc24149a3
\r\n"

C -> S:
"4a0b3ad6df572f4fe4fefb77f228feea7e7249537d2f864e6e159617eb58c425
\r\n"

In the previous exchange the following values have been used:
x_a: 4f38284fbc56c28f5d2913aaaffd5a23fecd306e899ee651a7135b55a52ebd3db28aac0669d2580fb16dee0a256dd99ae24f832c4e31963708a1b9396419857ed6add21b6f0a618b850a2e17aeef6c88f6d279e2f3d8c273df145ae189e012a27de8230c80a9ef27c38b1cfae33628608774c9f993882f698ef966607a4471e1
server name: netsec.unipr.it
client name: luca.veltri@unipr.it

The resulting DH secret was: 516bddd8266c51b25850cddde9f0aa999d2d112b590a5f977766faf4c46b46151a88972e150652b2095569438b8d6f173de4a42dfedbd243c6a59e9fdc365fc8c7e9a5c563c6acba563549b5c437476e3b5f12258754008d20a9bbb62909eefa993d3a218cf37e8a47f7b73f06d243a92fa27da99e3f1eb13e456ea06eb24de6

The last 16 bytes of the DH secret (that the bytes from from 112 to 127) have been used as k_m: 2fa27da99e3f1eb13e456ea06eb24de6


Additional notes:


- When an array of bytes is obtained as representation of an integer an vice versa, attention must be payed to the order of bytes (big-endian or little-endian) and the sign bit.
In particular in the proposed protocol we consider the integers encoded in byte arrays in big-endian byte-order (also called "network order"): the most significant byte is in the zeroth element of the array (note: the BigInteger of Java handles the conversion done by the method toByteArray() in this way).
When converting a positive integer to a byte array, if the most significant bit of the most significant byte of the array (the 0th byte) is 1, sometimes an extra 0x00 byte is added at the beginning as new 0th byte in order to have a two's-complement representation of a positive number. The length of the resulting array is then increased by 1.

- For the same reason attention must to be payed when an array of bytes has be converted to an integer. If we know that the integer is positive, the sign must not depend on the most significant bit. In case of Java, this can be assured by using the BigInteger constructor that has the sign as first argument (1 for positive).
When concatenating y_a and y_b, the same exchanged ya and y_b arrays must be used, regardless a zero byte was added by the sender at the beginning of the array for representing the integer or not.

